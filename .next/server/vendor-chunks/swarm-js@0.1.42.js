/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/swarm-js@0.1.42";
exports.ids = ["vendor-chunks/swarm-js@0.1.42"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/api-node.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/api-node.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/.pnpm/fs-extra@4.0.3/node_modules/fs-extra/lib/index.js\");\n\nvar files = __webpack_require__(/*! ./files.js */ \"(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/files.js\");\n\nvar os = __webpack_require__(/*! os */ \"os\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar child_process = __webpack_require__(/*! child_process */ \"child_process\");\n\nvar mimetype = __webpack_require__(/*! mime-types */ \"(ssr)/./node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js\");\n\nvar defaultArchives = __webpack_require__(/*! ./../archives/archives.json */ \"(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/archives/archives.json\");\n\nvar requester = __webpack_require__(/*! xhr-request */ \"(ssr)/./node_modules/.pnpm/xhr-request@1.1.0/node_modules/xhr-request/index.js\");\n\nvar downloadUrl = \"http://ethereum-mist.s3.amazonaws.com/swarm/\";\n\nvar bytes = __webpack_require__(/*! eth-lib/lib/bytes */ \"(ssr)/./node_modules/.pnpm/eth-lib@0.1.29/node_modules/eth-lib/lib/bytes.js\");\n\nvar hash = __webpack_require__(/*! ./swarm-hash.js */ \"(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm-hash.js\");\n\nvar pick = __webpack_require__(/*! ./pick.js */ \"(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/pick.js\");\n\nvar swarm = __webpack_require__(/*! ./swarm */ \"(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm.js\"); // Fixes issue that causes xhr-request-promise on Node.js to only accept Buffer\n\n\nvar request = function request(url, params, callback) {\n  var newParams = {};\n\n  for (var key in params) {\n    newParams[key] = params[key];\n  }\n\n  if (typeof newParams.body !== \"undefined\") {\n    newParams.body = newParams.body instanceof Buffer ? newParams.body : new Buffer(newParams.body);\n  }\n\n  return requester(url, newParams, callback);\n};\n\nmodule.exports = swarm({\n  fs: fs,\n  files: files,\n  os: os,\n  path: path,\n  child_process: child_process,\n  defaultArchives: defaultArchives,\n  mimetype: mimetype,\n  request: request,\n  downloadUrl: downloadUrl,\n  bytes: bytes,\n  hash: hash,\n  pick: pick\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvYXBpLW5vZGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxtQkFBTyxDQUFDLDhGQUFVOztBQUUzQixZQUFZLG1CQUFPLENBQUMsaUdBQVk7O0FBRWhDLFNBQVMsbUJBQU8sQ0FBQyxjQUFJOztBQUVyQixXQUFXLG1CQUFPLENBQUMsa0JBQU07O0FBRXpCLG9CQUFvQixtQkFBTyxDQUFDLG9DQUFlOztBQUUzQyxlQUFlLG1CQUFPLENBQUMsaUdBQVk7O0FBRW5DLHNCQUFzQixtQkFBTyxDQUFDLDRIQUE2Qjs7QUFFM0QsZ0JBQWdCLG1CQUFPLENBQUMsbUdBQWE7O0FBRXJDOztBQUVBLFlBQVksbUJBQU8sQ0FBQyxzR0FBbUI7O0FBRXZDLFdBQVcsbUJBQU8sQ0FBQywyR0FBaUI7O0FBRXBDLFdBQVcsbUJBQU8sQ0FBQywrRkFBVzs7QUFFOUIsWUFBWSxtQkFBTyxDQUFDLDhGQUFTLEdBQUc7OztBQUdoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvYXBpLW5vZGUuanM/MDU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKFwiZnMtZXh0cmFcIik7XG5cbnZhciBmaWxlcyA9IHJlcXVpcmUoXCIuL2ZpbGVzLmpzXCIpO1xuXG52YXIgb3MgPSByZXF1aXJlKFwib3NcIik7XG5cbnZhciBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XG5cbnZhciBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5cbnZhciBtaW1ldHlwZSA9IHJlcXVpcmUoJ21pbWUtdHlwZXMnKTtcblxudmFyIGRlZmF1bHRBcmNoaXZlcyA9IHJlcXVpcmUoXCIuLy4uL2FyY2hpdmVzL2FyY2hpdmVzLmpzb25cIik7XG5cbnZhciByZXF1ZXN0ZXIgPSByZXF1aXJlKFwieGhyLXJlcXVlc3RcIik7XG5cbnZhciBkb3dubG9hZFVybCA9IFwiaHR0cDovL2V0aGVyZXVtLW1pc3QuczMuYW1hem9uYXdzLmNvbS9zd2FybS9cIjtcblxudmFyIGJ5dGVzID0gcmVxdWlyZShcImV0aC1saWIvbGliL2J5dGVzXCIpO1xuXG52YXIgaGFzaCA9IHJlcXVpcmUoXCIuL3N3YXJtLWhhc2guanNcIik7XG5cbnZhciBwaWNrID0gcmVxdWlyZShcIi4vcGljay5qc1wiKTtcblxudmFyIHN3YXJtID0gcmVxdWlyZShcIi4vc3dhcm1cIik7IC8vIEZpeGVzIGlzc3VlIHRoYXQgY2F1c2VzIHhoci1yZXF1ZXN0LXByb21pc2Ugb24gTm9kZS5qcyB0byBvbmx5IGFjY2VwdCBCdWZmZXJcblxuXG52YXIgcmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QodXJsLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHZhciBuZXdQYXJhbXMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgbmV3UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgbmV3UGFyYW1zLmJvZHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBuZXdQYXJhbXMuYm9keSA9IG5ld1BhcmFtcy5ib2R5IGluc3RhbmNlb2YgQnVmZmVyID8gbmV3UGFyYW1zLmJvZHkgOiBuZXcgQnVmZmVyKG5ld1BhcmFtcy5ib2R5KTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0ZXIodXJsLCBuZXdQYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3dhcm0oe1xuICBmczogZnMsXG4gIGZpbGVzOiBmaWxlcyxcbiAgb3M6IG9zLFxuICBwYXRoOiBwYXRoLFxuICBjaGlsZF9wcm9jZXNzOiBjaGlsZF9wcm9jZXNzLFxuICBkZWZhdWx0QXJjaGl2ZXM6IGRlZmF1bHRBcmNoaXZlcyxcbiAgbWltZXR5cGU6IG1pbWV0eXBlLFxuICByZXF1ZXN0OiByZXF1ZXN0LFxuICBkb3dubG9hZFVybDogZG93bmxvYWRVcmwsXG4gIGJ5dGVzOiBieXRlcyxcbiAgaGFzaDogaGFzaCxcbiAgcGljazogcGlja1xufSk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/api-node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/files.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/files.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This module implements some file download utils. Its most important export\n// is `safeDownloadTargzFile`, which, given a file, its md5, a tar.gz url, its\n// md5 and a path, returns a Promise that will only resolve once the exact file\n// you expect is available on that path.\nvar Q = __webpack_require__(/*! bluebird */ \"(ssr)/./node_modules/.pnpm/bluebird@3.7.2/node_modules/bluebird/js/release/bluebird.js\");\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\nvar fs = __webpack_require__(/*! fs-extra */ \"(ssr)/./node_modules/.pnpm/fs-extra@4.0.3/node_modules/fs-extra/lib/index.js\");\n\nvar got = __webpack_require__(/*! got */ \"(ssr)/./node_modules/.pnpm/got@11.8.6/node_modules/got/dist/source/index.js\");\n\nvar mkdirp = __webpack_require__(/*! mkdirp-promise */ \"(ssr)/./node_modules/.pnpm/mkdirp-promise@5.0.1/node_modules/mkdirp-promise/lib/index.js\");\n\nvar path = __webpack_require__(/*! path */ \"path\");\n\nvar tar = __webpack_require__(/*! tar */ \"(ssr)/./node_modules/.pnpm/tar@4.4.19/node_modules/tar/index.js\"); // String -> String ~> Promise String\n//   Downloads a file from an url to a path.\n//   Returns a promise containing the path.\n\n\nvar download = function download(url) {\n  return function (filePath) {\n    var promise = Q.resolve(mkdirp(path.dirname(filePath))).then(function () {\n      return new Q(function (resolve, reject) {\n        var writeStream = fs.createWriteStream(filePath);\n        var downloadStream = got.stream(url);\n        downloadStream.on(\"end\", function () {\n          return resolve(filePath);\n        });\n        downloadStream.on(\"data\", function (chunk) {\n          return promise.onDataCallback(chunk);\n        });\n        downloadStream.on(\"error\", reject);\n        downloadStream.pipe(writeStream);\n      });\n    });\n\n    promise.onDataCallback = function () {};\n\n    promise.onData = function (callback) {\n      promise.onDataCallback = callback || function () {};\n\n      return promise;\n    };\n\n    return promise;\n  };\n}; // String -> String ~> Promise String\n//   Hashes a file using the given algorithm (ex: \"md5\").\n//   Returns a promise containing the hashed string.\n\n\nvar hash = function hash(algorithm) {\n  return function (path) {\n    return new Q(function (resolve, reject) {\n      var readStream = fs.ReadStream(path);\n      var hash = crypto.createHash(algorithm);\n      readStream.on(\"data\", function (d) {\n        return hash.update(d);\n      });\n      readStream.on(\"end\", function () {\n        return resolve(hash.digest(\"hex\"));\n      });\n      readStream.on(\"error\", reject);\n    });\n  };\n}; // String -> String ~> Promise ()\n//   Asserts a file matches this md5 hash.\n//   Returns a promise containing its path.\n\n\nvar checksum = function checksum(fileHash) {\n  return function (path) {\n    return hash(\"md5\")(path).then(function (actualHash) {\n      return actualHash === fileHash;\n    }).then(assert).then(function () {\n      return path;\n    });\n  };\n}; // String ~> String ~> String ~> Promise String\n//   Downloads a file to a directory, check.\n//   Checks if the md5 hash matches.\n//   Returns a promise containing the path.\n\n\nvar downloadAndCheck = function downloadAndCheck(url) {\n  return function (path) {\n    return function (fileHash) {\n      return download(url)(path).then(checksum(fileHash));\n    };\n  };\n}; // String -> String ~> Promise String\n//   TODO: work for zip and other types\n\n\nvar extract = function extract(fromPath) {\n  return function (toPath) {\n    return tar.x(fromPath, toPath).then(function () {\n      return toPath;\n    });\n  };\n}; // String ~> Promise String\n//   Reads a file as an UTF8 string.\n//   Returns a promise containing that string.\n\n\nvar readUTF8 = function readUTF8(path) {\n  return fs.readFile(path, {\n    encoding: \"utf8\"\n  });\n}; // String ~> Promise Bool\n\n\nvar isDirectory = function isDirectory(path) {\n  return fs.exists(path).then(assert).then(function () {\n    return fs.lstat(path);\n  }).then(function (stats) {\n    return stats.isDirectory();\n  })[\"catch\"](function () {\n    return false;\n  });\n}; // String -> Promise String\n\n\nvar directoryTree = function directoryTree(dirPath) {\n  var paths = [];\n\n  var search = function search(dirPath) {\n    return isDirectory(dirPath).then(function (isDir) {\n      if (isDir) {\n        var searchOnDir = function searchOnDir(dir) {\n          return search(path.join(dirPath, dir));\n        };\n\n        return Q.all(Q.map(fs.readdir(dirPath), searchOnDir));\n      } else {\n        paths.push(dirPath);\n      }\n\n      ;\n    });\n  };\n\n  return Q.all(search(dirPath)).then(function () {\n    return paths;\n  });\n}; // Regex -> String ~> Promise (Array String)\n\n\nvar search = function search(regex) {\n  return function (dirPath) {\n    return directoryTree(dirPath).then(function (tree) {\n      return tree.filter(function (path) {\n        return regex.test(path);\n      });\n    });\n  };\n}; // String -> String -> String -> String ~> Promise String\n//   Downloads a file inside a tar.gz and places it at `filePath`.\n//   Checks the md5 hash of the tar before extracting it.\n//   Checks the md5 hash of the file after extracting it.\n//   If all is OK, returns a promise containing the file path.\n\n\nvar safeDownloadArchived = function safeDownloadArchived(url) {\n  return function (archiveHash) {\n    return function (fileHash) {\n      return function (filePath) {\n        var fileDir = path.dirname(filePath);\n        var fileName = path.basename(filePath);\n        var archivePath = path.join(fileDir, \".swarm_downloads/files.tar.gz\");\n        var archiveDir = path.dirname(archivePath);\n        var promise = Q.resolve(mkdirp(archiveDir)).then(function () {\n          return checksum(fileHash)(filePath);\n        }).then(function () {\n          return filePath;\n        })[\"catch\"](function () {\n          return fs.exists(archiveDir).then(function (exists) {\n            return !exists ? fs.mkdir(archiveDir) : null;\n          }).then(function () {\n            return download(url)(archivePath).onData(promise.onDataCallback);\n          }).then(function () {\n            return hash(\"md5\")(archivePath);\n          }).then(function () {\n            return archiveHash ? checksum(archiveHash)(archivePath) : null;\n          }).then(function () {\n            return extract(archivePath)(archiveDir);\n          }).then(function () {\n            return search(new RegExp(fileName + \"$\"))(archiveDir);\n          }).then(function (fp) {\n            return fs.rename(fp[0], filePath);\n          }).then(function () {\n            return fs.unlink(archivePath);\n          }).then(function () {\n            return fileHash ? checksum(fileHash)(filePath) : null;\n          }).then(function () {\n            return filePath;\n          });\n        });\n\n        promise.onDataCallback = function () {};\n\n        promise.onData = function (callback) {\n          promise.onDataCallback = callback || function () {};\n\n          return promise;\n        };\n\n        return promise;\n      };\n    };\n  };\n}; // String -> String ~> Promise String\n//   Like `safeDownloadArchivedFile`, but without the checksums.\n\n\nvar downloadArchived = function downloadArchived(url) {\n  return function (path) {\n    return safeDownloadArchived(url)(null)(null)(path);\n  };\n}; // () => Promise Bool\n//   Tests the implementation by downloading a predetermined tar.gz\n//   from a mocked HTTP-server into a mocked filesystem. Does some\n//   redundancy tests such as checking the file constents and double\n//   checking its MD5 hash.\n//   Returns a promise containing a boolean, true if tests passed.\n\n\nvar test = function test() {\n  var filePath = \"/swarm/foo.txt\";\n  var fileHash = \"d3b07384d113edec49eaa6238ad5ff00\";\n  var archiveUrl = \"http://localhost:12534\";\n  var archiveHash = \"7fa45f946bb2a696bdd9972e0fbceac2\";\n  var archiveData = new Buffer([0x1f, 0x8b, 0x08, 0x00, 0xf1, 0x34, 0xaf, 0x58, 0x00, 0x03, 0xed, 0xcf, 0x3d, 0x0e, 0x83, 0x30, 0x0c, 0x86, 0x61, 0x66, 0x4e, 0xe1, 0x13, 0x54, 0xce, 0x0f, 0xc9, 0x79, 0x58, 0xb2, 0x46, 0x82, 0x14, 0x71, 0x7c, 0xd2, 0x06, 0x31, 0x52, 0x75, 0x40, 0x08, 0xe9, 0x7d, 0x96, 0x4f, 0x96, 0x3d, 0x7c, 0x4e, 0x39, 0xbf, 0xca, 0x5a, 0xba, 0x2b, 0xa9, 0x6a, 0xf0, 0x5e, 0x3e, 0x19, 0xc3, 0xf0, 0x4d, 0xb5, 0x6d, 0xde, 0x79, 0x31, 0x4e, 0x07, 0x17, 0x9c, 0xb5, 0x31, 0x8a, 0x1a, 0xab, 0xc6, 0x77, 0xa2, 0x97, 0xb6, 0xda, 0xbd, 0xe7, 0x32, 0x4e, 0xb5, 0xca, 0xf2, 0xe3, 0xae, 0x9e, 0xa5, 0x74, 0xb2, 0x6f, 0x8f, 0xc8, 0x91, 0x0f, 0x91, 0x72, 0xee, 0xef, 0xee, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xdf, 0x06, 0xb3, 0x2a, 0xda, 0xed, 0x00, 0x28, 0x00, 0x00]);\n\n  var crypto = __webpack_require__(/*! crypto */ \"crypto\");\n\n  var fsMock = __webpack_require__(/*! mock-fs */ \"(ssr)/./node_modules/.pnpm/mock-fs@4.14.0/node_modules/mock-fs/lib/index.js\")({\n    \"/swarm\": {}\n  });\n\n  var httpMock = (__webpack_require__(/*! http */ \"http\").createServer)(function (_, res) {\n    return res.end(archiveData);\n  }).listen(12534);\n\n  return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath).then(checksum(fileHash)).then(readUTF8).then(function (text) {\n    return text === \"foo\\n\";\n  }).then(assert).then(function () {\n    return safeDownloadArchived(archiveUrl)(archiveHash)(fileHash)(filePath);\n  }).then(function () {\n    return true;\n  })[\"catch\"](false)[\"finally\"](function () {\n    return httpMock.close();\n  });\n};\n\nmodule.exports = {\n  download: download,\n  hash: hash,\n  checksum: checksum,\n  downloadAndCheck: downloadAndCheck,\n  extract: extract,\n  readUTF8: readUTF8,\n  safeDownloadArchived: safeDownloadArchived,\n  directoryTree: directoryTree,\n  downloadArchived: downloadArchived,\n  search: search,\n  test: test\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/files.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/pick.js":
/*!******************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/pick.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("var picker = function picker(type) {\n  return function () {\n    return new Promise(function (resolve, reject) {\n      var fileLoader = function fileLoader(e) {\n        var directory = {};\n        var totalFiles = e.target.files.length;\n        var loadedFiles = 0;\n        [].map.call(e.target.files, function (file) {\n          var reader = new FileReader();\n\n          reader.onload = function (e) {\n            var data = new Uint8Array(e.target.result);\n\n            if (type === \"directory\") {\n              var path = file.webkitRelativePath;\n              directory[path.slice(path.indexOf(\"/\") + 1)] = {\n                type: \"text/plain\",\n                data: data\n              };\n              if (++loadedFiles === totalFiles) resolve(directory);\n            } else if (type === \"file\") {\n              var _path = file.webkitRelativePath;\n              resolve({\n                \"type\": mimetype.lookup(_path),\n                \"data\": data\n              });\n            } else {\n              resolve(data);\n            }\n          };\n\n          reader.readAsArrayBuffer(file);\n        });\n      };\n\n      var fileInput;\n\n      if (type === \"directory\") {\n        fileInput = document.createElement(\"input\");\n        fileInput.addEventListener(\"change\", fileLoader);\n        fileInput.type = \"file\";\n        fileInput.webkitdirectory = true;\n        fileInput.mozdirectory = true;\n        fileInput.msdirectory = true;\n        fileInput.odirectory = true;\n        fileInput.directory = true;\n      } else {\n        fileInput = document.createElement(\"input\");\n        fileInput.addEventListener(\"change\", fileLoader);\n        fileInput.type = \"file\";\n      }\n\n      ;\n      var mouseEvent = document.createEvent(\"MouseEvents\");\n      mouseEvent.initEvent(\"click\", true, false);\n      fileInput.dispatchEvent(mouseEvent);\n    });\n  };\n};\n\nmodule.exports = {\n  data: picker(\"data\"),\n  file: picker(\"file\"),\n  directory: picker(\"directory\")\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvcGljay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvcGljay5qcz9kM2UwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwaWNrZXIgPSBmdW5jdGlvbiBwaWNrZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZmlsZUxvYWRlciA9IGZ1bmN0aW9uIGZpbGVMb2FkZXIoZSkge1xuICAgICAgICB2YXIgZGlyZWN0b3J5ID0ge307XG4gICAgICAgIHZhciB0b3RhbEZpbGVzID0gZS50YXJnZXQuZmlsZXMubGVuZ3RoO1xuICAgICAgICB2YXIgbG9hZGVkRmlsZXMgPSAwO1xuICAgICAgICBbXS5tYXAuY2FsbChlLnRhcmdldC5maWxlcywgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcblxuICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShlLnRhcmdldC5yZXN1bHQpO1xuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXCJkaXJlY3RvcnlcIikge1xuICAgICAgICAgICAgICB2YXIgcGF0aCA9IGZpbGUud2Via2l0UmVsYXRpdmVQYXRoO1xuICAgICAgICAgICAgICBkaXJlY3RvcnlbcGF0aC5zbGljZShwYXRoLmluZGV4T2YoXCIvXCIpICsgMSldID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKCsrbG9hZGVkRmlsZXMgPT09IHRvdGFsRmlsZXMpIHJlc29sdmUoZGlyZWN0b3J5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICAgICAgdmFyIF9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGg7XG4gICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBtaW1ldHlwZS5sb29rdXAoX3BhdGgpLFxuICAgICAgICAgICAgICAgIFwiZGF0YVwiOiBkYXRhXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBmaWxlSW5wdXQ7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImRpcmVjdG9yeVwiKSB7XG4gICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZmlsZUxvYWRlcik7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gXCJmaWxlXCI7XG4gICAgICAgIGZpbGVJbnB1dC53ZWJraXRkaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgICBmaWxlSW5wdXQubW96ZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgZmlsZUlucHV0Lm1zZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgICAgZmlsZUlucHV0Lm9kaXJlY3RvcnkgPSB0cnVlO1xuICAgICAgICBmaWxlSW5wdXQuZGlyZWN0b3J5ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZmlsZUxvYWRlcik7XG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gXCJmaWxlXCI7XG4gICAgICB9XG5cbiAgICAgIDtcbiAgICAgIHZhciBtb3VzZUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgIG1vdXNlRXZlbnQuaW5pdEV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgZmlsZUlucHV0LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGF0YTogcGlja2VyKFwiZGF0YVwiKSxcbiAgZmlsZTogcGlja2VyKFwiZmlsZVwiKSxcbiAgZGlyZWN0b3J5OiBwaWNrZXIoXCJkaXJlY3RvcnlcIilcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/pick.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm-hash.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm-hash.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Thanks https://github.com/axic/swarmhash\nvar keccak = (__webpack_require__(/*! eth-lib/lib/hash */ \"(ssr)/./node_modules/.pnpm/eth-lib@0.1.29/node_modules/eth-lib/lib/hash.js\").keccak256);\n\nvar Bytes = __webpack_require__(/*! eth-lib/lib/bytes */ \"(ssr)/./node_modules/.pnpm/eth-lib@0.1.29/node_modules/eth-lib/lib/bytes.js\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvc3dhcm0taGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGFBQWEscUlBQXFDOztBQUVsRCxZQUFZLG1CQUFPLENBQUMsc0dBQW1COztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9raWNrc3RhcnQvLi9ub2RlX21vZHVsZXMvLnBucG0vc3dhcm0tanNAMC4xLjQyL25vZGVfbW9kdWxlcy9zd2FybS1qcy9saWIvc3dhcm0taGFzaC5qcz81NDNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoYW5rcyBodHRwczovL2dpdGh1Yi5jb20vYXhpYy9zd2FybWhhc2hcbnZhciBrZWNjYWsgPSByZXF1aXJlKFwiZXRoLWxpYi9saWIvaGFzaFwiKS5rZWNjYWsyNTY7XG5cbnZhciBCeXRlcyA9IHJlcXVpcmUoXCJldGgtbGliL2xpYi9ieXRlc1wiKTtcblxudmFyIHN3YXJtSGFzaEJsb2NrID0gZnVuY3Rpb24gc3dhcm1IYXNoQmxvY2sobGVuZ3RoLCBkYXRhKSB7XG4gIHZhciBsZW5ndGhFbmNvZGVkID0gQnl0ZXMucmV2ZXJzZShCeXRlcy5wYWQoNiwgQnl0ZXMuZnJvbU51bWJlcihsZW5ndGgpKSk7XG4gIHZhciBieXRlcyA9IEJ5dGVzLmZsYXR0ZW4oW2xlbmd0aEVuY29kZWQsIFwiMHgwMDAwXCIsIGRhdGFdKTtcbiAgcmV0dXJuIGtlY2NhayhieXRlcykuc2xpY2UoMik7XG59OyAvLyAoQnl0ZXMgfCBVaW50OEFycmF5IHwgU3RyaW5nKSAtPiBTdHJpbmdcblxuXG52YXIgc3dhcm1IYXNoID0gZnVuY3Rpb24gc3dhcm1IYXNoKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICYmIGRhdGEuc2xpY2UoMCwgMikgIT09IFwiMHhcIikge1xuICAgIGRhdGEgPSBCeXRlcy5mcm9tU3RyaW5nKGRhdGEpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICYmIGRhdGEubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICBkYXRhID0gQnl0ZXMuZnJvbVVpbnQ4QXJyYXkoZGF0YSk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gQnl0ZXMubGVuZ3RoKGRhdGEpO1xuXG4gIGlmIChsZW5ndGggPD0gNDA5Nikge1xuICAgIHJldHVybiBzd2FybUhhc2hCbG9jayhsZW5ndGgsIGRhdGEpO1xuICB9XG5cbiAgdmFyIG1heFNpemUgPSA0MDk2O1xuXG4gIHdoaWxlIChtYXhTaXplICogKDQwOTYgLyAzMikgPCBsZW5ndGgpIHtcbiAgICBtYXhTaXplICo9IDQwOTYgLyAzMjtcbiAgfVxuXG4gIHZhciBpbm5lck5vZGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gbWF4U2l6ZSkge1xuICAgIHZhciBzaXplID0gbWF4U2l6ZSA8IGxlbmd0aCAtIGkgPyBtYXhTaXplIDogbGVuZ3RoIC0gaTtcbiAgICBpbm5lck5vZGVzLnB1c2goc3dhcm1IYXNoKEJ5dGVzLnNsaWNlKGRhdGEsIGksIGkgKyBzaXplKSkpO1xuICB9XG5cbiAgcmV0dXJuIHN3YXJtSGFzaEJsb2NrKGxlbmd0aCwgQnl0ZXMuZmxhdHRlbihpbm5lck5vZGVzKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN3YXJtSGFzaDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm-hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("// TODO: this is a temporary fix to hide those libraries from the browser. A\n// slightly better long-term solution would be to split this file into two,\n// separating the functions that are used on Node.js from the functions that\n// are used only on the browser.\nmodule.exports = function (_ref) {\n  var fs = _ref.fs,\n      files = _ref.files,\n      os = _ref.os,\n      path = _ref.path,\n      child_process = _ref.child_process,\n      mimetype = _ref.mimetype,\n      defaultArchives = _ref.defaultArchives,\n      request = _ref.request,\n      downloadUrl = _ref.downloadUrl,\n      bytes = _ref.bytes,\n      hash = _ref.hash,\n      pick = _ref.pick;\n\n  // ∀ a . String -> JSON -> Map String a -o Map String a\n  //   Inserts a key/val pair in an object impurely.\n  var impureInsert = function impureInsert(key) {\n    return function (val) {\n      return function (map) {\n        return map[key] = val, map;\n      };\n    };\n  }; // String -> JSON -> Map String JSON\n  //   Merges an array of keys and an array of vals into an object.\n\n\n  var toMap = function toMap(keys) {\n    return function (vals) {\n      var map = {};\n\n      for (var i = 0, l = keys.length; i < l; ++i) {\n        map[keys[i]] = vals[i];\n      }\n\n      return map;\n    };\n  }; // ∀ a . Map String a -> Map String a -> Map String a\n  //   Merges two maps into one.\n\n\n  var merge = function merge(a) {\n    return function (b) {\n      var map = {};\n\n      for (var key in a) {\n        map[key] = a[key];\n      }\n\n      for (var _key in b) {\n        map[_key] = b[_key];\n      }\n\n      return map;\n    };\n  }; // ∀ a . [a] -> [a] -> Bool\n\n\n  var equals = function equals(a) {\n    return function (b) {\n      if (a.length !== b.length) {\n        return false;\n      } else {\n        for (var i = 0, l = a.length; i < l; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n      }\n\n      return true;\n    };\n  }; // String -> String -> String\n\n\n  var rawUrl = function rawUrl(swarmUrl) {\n    return function (hash) {\n      return \"\".concat(swarmUrl, \"/bzz-raw:/\").concat(hash);\n    };\n  }; // String -> String -> Promise Uint8Array\n  //   Gets the raw contents of a Swarm hash address.\n\n\n  var downloadData = function downloadData(swarmUrl) {\n    return function (hash) {\n      return new Promise(function (resolve, reject) {\n        request(rawUrl(swarmUrl)(hash), {\n          responseType: \"arraybuffer\"\n        }, function (err, arrayBuffer, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          if (response.statusCode >= 400) {\n            return reject(new Error(\"Error \".concat(response.statusCode, \".\")));\n          }\n\n          return resolve(new Uint8Array(arrayBuffer));\n        });\n      });\n    };\n  }; // type Entry = {\"type\": String, \"hash\": String}\n  // type File = {\"type\": String, \"data\": Uint8Array}\n  // String -> String -> Promise (Map String Entry)\n  //   Solves the manifest of a Swarm address recursively.\n  //   Returns a map from full paths to entries.\n\n\n  var downloadEntries = function downloadEntries(swarmUrl) {\n    return function (hash) {\n      var search = function search(hash) {\n        return function (path) {\n          return function (routes) {\n            // Formats an entry to the Swarm.js type.\n            var format = function format(entry) {\n              return {\n                type: entry.contentType,\n                hash: entry.hash\n              };\n            }; // To download a single entry:\n            //   if type is bzz-manifest, go deeper\n            //   if not, add it to the routing table\n\n\n            var downloadEntry = function downloadEntry(entry) {\n              if (entry.path === undefined) {\n                return Promise.resolve();\n              } else {\n                return entry.contentType === \"application/bzz-manifest+json\" ? search(entry.hash)(path + entry.path)(routes) : Promise.resolve(impureInsert(path + entry.path)(format(entry))(routes));\n              }\n            }; // Downloads the initial manifest and then each entry.\n\n\n            return downloadData(swarmUrl)(hash).then(function (text) {\n              return JSON.parse(toString(text)).entries;\n            }).then(function (entries) {\n              return Promise.all(entries.map(downloadEntry));\n            }).then(function () {\n              return routes;\n            });\n          };\n        };\n      };\n\n      return search(hash)(\"\")({});\n    };\n  }; // String -> String -> Promise (Map String String)\n  //   Same as `downloadEntries`, but returns only hashes (no types).\n\n\n  var downloadRoutes = function downloadRoutes(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        return toMap(Object.keys(entries))(Object.keys(entries).map(function (route) {\n          return entries[route].hash;\n        }));\n      });\n    };\n  }; // String -> String -> Promise (Map String File)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectory = function downloadDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadEntries(swarmUrl)(hash).then(function (entries) {\n        var paths = Object.keys(entries);\n        var hashs = paths.map(function (path) {\n          return entries[path].hash;\n        });\n        var types = paths.map(function (path) {\n          return entries[path].type;\n        });\n        var datas = hashs.map(downloadData(swarmUrl));\n\n        var files = function files(datas) {\n          return datas.map(function (data, i) {\n            return {\n              type: types[i],\n              data: data\n            };\n          });\n        };\n\n        return Promise.all(datas).then(function (datas) {\n          return toMap(paths)(files(datas));\n        });\n      });\n    };\n  }; // String -> String -> String -> Promise String\n  //   Gets the raw contents of a Swarm hash address.\n  //   Returns a promise with the downloaded file path.\n\n\n  var downloadDataToDisk = function downloadDataToDisk(swarmUrl) {\n    return function (hash) {\n      return function (filePath) {\n        return files.download(rawUrl(swarmUrl)(hash))(filePath);\n      };\n    };\n  }; // String -> String -> String -> Promise (Map String String)\n  //   Gets the entire directory tree in a Swarm address.\n  //   Returns a promise mapping paths to file contents.\n\n\n  var downloadDirectoryToDisk = function downloadDirectoryToDisk(swarmUrl) {\n    return function (hash) {\n      return function (dirPath) {\n        return downloadRoutes(swarmUrl)(hash).then(function (routingTable) {\n          var downloads = [];\n\n          for (var route in routingTable) {\n            if (route.length > 0) {\n              var filePath = path.join(dirPath, route);\n              downloads.push(downloadDataToDisk(swarmUrl)(routingTable[route])(filePath));\n            }\n\n            ;\n          }\n\n          ;\n          return Promise.all(downloads).then(function () {\n            return dirPath;\n          });\n        });\n      };\n    };\n  }; // String -> Uint8Array -> Promise String\n  //   Uploads raw data to Swarm.\n  //   Returns a promise with the uploaded hash.\n\n\n  var uploadData = function uploadData(swarmUrl) {\n    return function (data) {\n      return new Promise(function (resolve, reject) {\n        var params = {\n          body: typeof data === \"string\" ? fromString(data) : data,\n          method: \"POST\"\n        };\n        request(\"\".concat(swarmUrl, \"/bzz-raw:/\"), params, function (err, data) {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(data);\n        });\n      });\n    };\n  }; // String -> String -> String -> File -> Promise String\n  //   Uploads a file to the Swarm manifest at a given hash, under a specific\n  //   route. Returns a promise containing the uploaded hash.\n  //   FIXME: for some reasons Swarm-Gateways is sometimes returning\n  //   error 404 (bad request), so we retry up to 3 times. Why?\n\n\n  var uploadToManifest = function uploadToManifest(swarmUrl) {\n    return function (hash) {\n      return function (route) {\n        return function (file) {\n          var attempt = function attempt(n) {\n            var slashRoute = route[0] === \"/\" ? route : \"/\" + route;\n            var url = \"\".concat(swarmUrl, \"/bzz:/\").concat(hash).concat(slashRoute);\n            var opt = {\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type\n              },\n              body: file.data\n            };\n            return new Promise(function (resolve, reject) {\n              request(url, opt, function (err, data) {\n                if (err) {\n                  return reject(err);\n                }\n\n                if (data.indexOf(\"error\") !== -1) {\n                  return reject(data);\n                }\n\n                return resolve(data);\n              });\n            })[\"catch\"](function (e) {\n              return n > 0 && attempt(n - 1);\n            });\n          };\n\n          return attempt(3);\n        };\n      };\n    };\n  }; // String -> {type: String, data: Uint8Array} -> Promise String\n\n\n  var uploadFile = function uploadFile(swarmUrl) {\n    return function (file) {\n      return uploadDirectory(swarmUrl)({\n        \"\": file\n      });\n    };\n  }; // String -> String -> Promise String\n\n\n  var uploadFileFromDisk = function uploadFileFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(function (data) {\n        return uploadFile(swarmUrl)({\n          type: mimetype.lookup(filePath),\n          data: data\n        });\n      });\n    };\n  }; // String -> Map String File -> Promise String\n  //   Uploads a directory to Swarm. The directory is\n  //   represented as a map of routes and files.\n  //   A default path is encoded by having a \"\" route.\n\n\n  var uploadDirectory = function uploadDirectory(swarmUrl) {\n    return function (directory) {\n      return uploadData(swarmUrl)(\"{}\").then(function (hash) {\n        var uploadRoute = function uploadRoute(route) {\n          return function (hash) {\n            return uploadToManifest(swarmUrl)(hash)(route)(directory[route]);\n          };\n        };\n\n        var uploadToHash = function uploadToHash(hash, route) {\n          return hash.then(uploadRoute(route));\n        };\n\n        return Object.keys(directory).reduce(uploadToHash, Promise.resolve(hash));\n      });\n    };\n  }; // String -> Promise String\n\n\n  var uploadDataFromDisk = function uploadDataFromDisk(swarmUrl) {\n    return function (filePath) {\n      return fs.readFile(filePath).then(uploadData(swarmUrl));\n    };\n  }; // String -> Nullable String -> String -> Promise String\n\n\n  var uploadDirectoryFromDisk = function uploadDirectoryFromDisk(swarmUrl) {\n    return function (defaultPath) {\n      return function (dirPath) {\n        return files.directoryTree(dirPath).then(function (fullPaths) {\n          return Promise.all(fullPaths.map(function (path) {\n            return fs.readFile(path);\n          })).then(function (datas) {\n            var paths = fullPaths.map(function (path) {\n              return path.slice(dirPath.length);\n            });\n            var types = fullPaths.map(function (path) {\n              return mimetype.lookup(path) || \"text/plain\";\n            });\n            return toMap(paths)(datas.map(function (data, i) {\n              return {\n                type: types[i],\n                data: data\n              };\n            }));\n          });\n        }).then(function (directory) {\n          return merge(defaultPath ? {\n            \"\": directory[defaultPath]\n          } : {})(directory);\n        }).then(uploadDirectory(swarmUrl));\n      };\n    };\n  }; // String -> UploadInfo -> Promise String\n  //   Simplified multi-type upload which calls the correct\n  //   one based on the type of the argument given.\n\n\n  var _upload = function upload(swarmUrl) {\n    return function (arg) {\n      // Upload raw data from browser\n      if (arg.pick === \"data\") {\n        return pick.data().then(uploadData(swarmUrl)); // Upload a file from browser\n      } else if (arg.pick === \"file\") {\n        return pick.file().then(uploadFile(swarmUrl)); // Upload a directory from browser\n      } else if (arg.pick === \"directory\") {\n        return pick.directory().then(uploadDirectory(swarmUrl)); // Upload directory/file from disk\n      } else if (arg.path) {\n        switch (arg.kind) {\n          case \"data\":\n            return uploadDataFromDisk(swarmUrl)(arg.path);\n\n          case \"file\":\n            return uploadFileFromDisk(swarmUrl)(arg.path);\n\n          case \"directory\":\n            return uploadDirectoryFromDisk(swarmUrl)(arg.defaultFile)(arg.path);\n        }\n\n        ; // Upload UTF-8 string or raw data (buffer)\n      } else if (arg.length || typeof arg === \"string\") {\n        return uploadData(swarmUrl)(arg); // Upload directory with JSON\n      } else if (arg instanceof Object) {\n        return uploadDirectory(swarmUrl)(arg);\n      }\n\n      return Promise.reject(new Error(\"Bad arguments\"));\n    };\n  }; // String -> String -> Nullable String -> Promise (String | Uint8Array | Map String Uint8Array)\n  //   Simplified multi-type download which calls the correct function based on\n  //   the type of the argument given, and on whether the Swwarm address has a\n  //   directory or a file.\n\n\n  var _download = function download(swarmUrl) {\n    return function (hash) {\n      return function (path) {\n        return isDirectory(swarmUrl)(hash).then(function (isDir) {\n          if (isDir) {\n            return path ? downloadDirectoryToDisk(swarmUrl)(hash)(path) : downloadDirectory(swarmUrl)(hash);\n          } else {\n            return path ? downloadDataToDisk(swarmUrl)(hash)(path) : downloadData(swarmUrl)(hash);\n          }\n        });\n      };\n    };\n  }; // String -> Promise String\n  //   Downloads the Swarm binaries into a path. Returns a promise that only\n  //   resolves when the exact Swarm file is there, and verified to be correct.\n  //   If it was already there to begin with, skips the download.\n\n\n  var downloadBinary = function downloadBinary(path, archives) {\n    var system = os.platform().replace(\"win32\", \"windows\") + \"-\" + (os.arch() === \"x64\" ? \"amd64\" : \"386\");\n    var archive = (archives || defaultArchives)[system];\n    var archiveUrl = downloadUrl + archive.archive + \".tar.gz\";\n    var archiveMD5 = archive.archiveMD5;\n    var binaryMD5 = archive.binaryMD5;\n    return files.safeDownloadArchived(archiveUrl)(archiveMD5)(binaryMD5)(path);\n  }; // type SwarmSetup = {\n  //   account : String,\n  //   password : String,\n  //   dataDir : String,\n  //   binPath : String,\n  //   ensApi : String,\n  //   onDownloadProgress : Number ~> (),\n  //   archives : [{\n  //     archive: String,\n  //     binaryMD5: String,\n  //     archiveMD5: String\n  //   }]\n  // }\n  // SwarmSetup ~> Promise Process\n  //   Starts the Swarm process.\n\n\n  var startProcess = function startProcess(swarmSetup) {\n    return new Promise(function (resolve, reject) {\n      var spawn = child_process.spawn;\n\n      var hasString = function hasString(str) {\n        return function (buffer) {\n          return ('' + buffer).indexOf(str) !== -1;\n        };\n      };\n\n      var account = swarmSetup.account,\n          password = swarmSetup.password,\n          dataDir = swarmSetup.dataDir,\n          ensApi = swarmSetup.ensApi,\n          privateKey = swarmSetup.privateKey;\n      var STARTUP_TIMEOUT_SECS = 3;\n      var WAITING_PASSWORD = 0;\n      var STARTING = 1;\n      var LISTENING = 2;\n      var PASSWORD_PROMPT_HOOK = \"Passphrase\";\n      var LISTENING_HOOK = \"Swarm http proxy started\";\n      var state = WAITING_PASSWORD;\n      var swarmProcess = spawn(swarmSetup.binPath, ['--bzzaccount', account || privateKey, '--datadir', dataDir, '--ens-api', ensApi]);\n\n      var handleProcessOutput = function handleProcessOutput(data) {\n        if (state === WAITING_PASSWORD && hasString(PASSWORD_PROMPT_HOOK)(data)) {\n          setTimeout(function () {\n            state = STARTING;\n            swarmProcess.stdin.write(password + '\\n');\n          }, 500);\n        } else if (hasString(LISTENING_HOOK)(data)) {\n          state = LISTENING;\n          clearTimeout(timeout);\n          resolve(swarmProcess);\n        }\n      };\n\n      swarmProcess.stdout.on('data', handleProcessOutput);\n      swarmProcess.stderr.on('data', handleProcessOutput); //swarmProcess.on('close', () => setTimeout(restart, 2000));\n\n      var restart = function restart() {\n        return startProcess(swarmSetup).then(resolve)[\"catch\"](reject);\n      };\n\n      var error = function error() {\n        return reject(new Error(\"Couldn't start swarm process.\"));\n      };\n\n      var timeout = setTimeout(error, 20000);\n    });\n  }; // Process ~> Promise ()\n  //   Stops the Swarm process.\n\n\n  var stopProcess = function stopProcess(process) {\n    return new Promise(function (resolve, reject) {\n      process.stderr.removeAllListeners('data');\n      process.stdout.removeAllListeners('data');\n      process.stdin.removeAllListeners('error');\n      process.removeAllListeners('error');\n      process.removeAllListeners('exit');\n      process.kill('SIGINT');\n      var killTimeout = setTimeout(function () {\n        return process.kill('SIGKILL');\n      }, 8000);\n      process.once('close', function () {\n        clearTimeout(killTimeout);\n        resolve();\n      });\n    });\n  }; // SwarmSetup -> (SwarmAPI -> Promise ()) -> Promise ()\n  //   Receives a Swarm configuration object and a callback function. It then\n  //   checks if a local Swarm node is running. If no local Swarm is found, it\n  //   downloads the Swarm binaries to the dataDir (if not there), checksums,\n  //   starts the Swarm process and calls the callback function with an API\n  //   object using the local node. That callback must return a promise which\n  //   will resolve when it is done using the API, so that this function can\n  //   close the Swarm process properly. Returns a promise that resolves when the\n  //   user is done with the API and the Swarm process is closed.\n  //   TODO: check if Swarm process is already running (improve `isAvailable`)\n\n\n  var local = function local(swarmSetup) {\n    return function (useAPI) {\n      return _isAvailable(\"http://localhost:8500\").then(function (isAvailable) {\n        return isAvailable ? useAPI(at(\"http://localhost:8500\")).then(function () {}) : downloadBinary(swarmSetup.binPath, swarmSetup.archives).onData(function (data) {\n          return (swarmSetup.onProgress || function () {})(data.length);\n        }).then(function () {\n          return startProcess(swarmSetup);\n        }).then(function (process) {\n          return useAPI(at(\"http://localhost:8500\")).then(function () {\n            return process;\n          });\n        }).then(stopProcess);\n      });\n    };\n  }; // String ~> Promise Bool\n  //   Returns true if Swarm is available on `url`.\n  //   Perfoms a test upload to determine that.\n  //   TODO: improve this?\n\n\n  var _isAvailable = function isAvailable(swarmUrl) {\n    var testFile = \"test\";\n    var testHash = \"c9a99c7d326dcc6316f32fe2625b311f6dc49a175e6877681ded93137d3569e7\";\n    return uploadData(swarmUrl)(testFile).then(function (hash) {\n      return hash === testHash;\n    })[\"catch\"](function () {\n      return false;\n    });\n  }; // String -> String ~> Promise Bool\n  //   Returns a Promise which is true if that Swarm address is a directory.\n  //   Determines that by checking that it (i) is a JSON, (ii) has a .entries.\n  //   TODO: improve this?\n\n\n  var isDirectory = function isDirectory(swarmUrl) {\n    return function (hash) {\n      return downloadData(swarmUrl)(hash).then(function (data) {\n        try {\n          return !!JSON.parse(toString(data)).entries;\n        } catch (e) {\n          return false;\n        }\n      });\n    };\n  }; // Uncurries a function; used to allow the f(x,y,z) style on exports.\n\n\n  var uncurry = function uncurry(f) {\n    return function (a, b, c, d, e) {\n      var p; // Hardcoded because efficiency (`arguments` is very slow).\n\n      if (typeof a !== \"undefined\") p = f(a);\n      if (typeof b !== \"undefined\") p = f(b);\n      if (typeof c !== \"undefined\") p = f(c);\n      if (typeof d !== \"undefined\") p = f(d);\n      if (typeof e !== \"undefined\") p = f(e);\n      return p;\n    };\n  }; // () -> Promise Bool\n  //   Not sure how to mock Swarm to test it properly. Ideas?\n\n\n  var test = function test() {\n    return Promise.resolve(true);\n  }; // Uint8Array -> String\n\n\n  var toString = function toString(uint8Array) {\n    return bytes.toString(bytes.fromUint8Array(uint8Array));\n  }; // String -> Uint8Array\n\n\n  var fromString = function fromString(string) {\n    return bytes.toUint8Array(bytes.fromString(string));\n  }; // String -> SwarmAPI\n  //   Fixes the `swarmUrl`, returning an API where you don't have to pass it.\n\n\n  var at = function at(swarmUrl) {\n    return {\n      download: function download(hash, path) {\n        return _download(swarmUrl)(hash)(path);\n      },\n      downloadData: uncurry(downloadData(swarmUrl)),\n      downloadDataToDisk: uncurry(downloadDataToDisk(swarmUrl)),\n      downloadDirectory: uncurry(downloadDirectory(swarmUrl)),\n      downloadDirectoryToDisk: uncurry(downloadDirectoryToDisk(swarmUrl)),\n      downloadEntries: uncurry(downloadEntries(swarmUrl)),\n      downloadRoutes: uncurry(downloadRoutes(swarmUrl)),\n      isAvailable: function isAvailable() {\n        return _isAvailable(swarmUrl);\n      },\n      upload: function upload(arg) {\n        return _upload(swarmUrl)(arg);\n      },\n      uploadData: uncurry(uploadData(swarmUrl)),\n      uploadFile: uncurry(uploadFile(swarmUrl)),\n      uploadFileFromDisk: uncurry(uploadFile(swarmUrl)),\n      uploadDataFromDisk: uncurry(uploadDataFromDisk(swarmUrl)),\n      uploadDirectory: uncurry(uploadDirectory(swarmUrl)),\n      uploadDirectoryFromDisk: uncurry(uploadDirectoryFromDisk(swarmUrl)),\n      uploadToManifest: uncurry(uploadToManifest(swarmUrl)),\n      pick: pick,\n      hash: hash,\n      fromString: fromString,\n      toString: toString\n    };\n  };\n\n  return {\n    at: at,\n    local: local,\n    download: _download,\n    downloadBinary: downloadBinary,\n    downloadData: downloadData,\n    downloadDataToDisk: downloadDataToDisk,\n    downloadDirectory: downloadDirectory,\n    downloadDirectoryToDisk: downloadDirectoryToDisk,\n    downloadEntries: downloadEntries,\n    downloadRoutes: downloadRoutes,\n    isAvailable: _isAvailable,\n    startProcess: startProcess,\n    stopProcess: stopProcess,\n    upload: _upload,\n    uploadData: uploadData,\n    uploadDataFromDisk: uploadDataFromDisk,\n    uploadFile: uploadFile,\n    uploadFileFromDisk: uploadFileFromDisk,\n    uploadDirectory: uploadDirectory,\n    uploadDirectoryFromDisk: uploadDirectoryFromDisk,\n    uploadToManifest: uploadToManifest,\n    pick: pick,\n    hash: hash,\n    fromString: fromString,\n    toString: toString\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/lib/swarm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/archives/archives.json":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/swarm-js@0.1.42/node_modules/swarm-js/archives/archives.json ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"windows-amd64":{"archive":"swarm-windows-amd64-1.6.7.exe","binaryMD5":"c2d827dc4553d9b91a7d6c1d5a6140fd","archiveMD5":"059196d21548060a18a12e17cc0ee59a"},"linux-amd64":{"archive":"swarm-linux-amd64-1.6.7","binaryMD5":"85002d79b8ebc2d2f2f10fb198636a81","archiveMD5":"3e8874299ab8c0e3043d70ebb6673879"},"linux-386":{"archive":"swarm-linux-386-1.6.7","binaryMD5":"35bc2ab976f60f96a2cede117e0df19d","archiveMD5":"7868a86c9cbdf8ac7ac2e5682b4ce40f"},"darwin-amd64":{"archive":"swarm-darwin-amd64-1.6.7","binaryMD5":"c499b186645229260dd6ab685dd58f07","archiveMD5":"0794d111e5018eac3b657bcb29851121"},"linux-arm5":{"archive":"swarm-linux-arm5-1.6.7","binaryMD5":"516fcd85246c905529442cd9b689c12f","archiveMD5":"47312708d417cb196b07ba0af1d3abb4"},"linux-arm6":{"archive":"swarm-linux-arm6-1.6.7","binaryMD5":"82ff7bdbe388b4a190f4101c5150d3b4","archiveMD5":"350276de7bb175a15c314cfc4cb7f8fd"},"linux-mips":{"archive":"swarm-linux-mips-1.6.7","binaryMD5":"e1e95280441c0ca35633927792ef5317","archiveMD5":"8fb4b64e94cd73aa718db787b9d4c53e"},"linux-arm7":{"archive":"swarm-linux-arm7-1.6.7","binaryMD5":"bfc0b4d1c86d8a975af052fc7854bdd3","archiveMD5":"4378641d8e1e1fbb947f941c8fca8613"},"linux-arm64":{"archive":"swarm-linux-arm64-1.6.7","binaryMD5":"bbac21a6c6fa8208f67ca4123d3f948a","archiveMD5":"4e503160327c5fbcca0414f17c54e5ee"},"linux-mipsle":{"archive":"swarm-linux-mipsle-1.6.7","binaryMD5":"a82f191b2f9d2c470d0273219c820657","archiveMD5":"3016bdb6d237ae654c0cdf36fe85dc7c"},"windows-386":{"archive":"swarm-windows-386-1.6.7.exe","binaryMD5":"ce0b34640642e58068ae5a359faef102","archiveMD5":"640aede4da08a3a9d8a6ac0434ba7c0f"},"linux-mips64":{"archive":"swarm-linux-mips64-1.6.7","binaryMD5":"9da967664f384817adb5083fd1ffe8f1","archiveMD5":"357a33be470f8f89ba2619957a08deff"},"linux-mips64le":{"archive":"swarm-linux-mips64le-1.6.7","binaryMD5":"ec1abcf7b216e87645ec83954d8344cd","archiveMD5":"a81fd0158190d99813c738ffa4f87627"}}');

/***/ })

};
;